# APP env
progName="cnctsun"
progArch="-x86_64"
progVer=
progHome="$HOME/.$progName-v6"
progBin="clientxna.exe"
progIcoD="$HOME/.local/share/applications/$progName.desktop"
progRealPath="$APPDIR/usr/share/tsclient"

if [ -d "$APPDIR/winedata/.wine" ]; then
# env used by unionfs-fuse
# WINEPREFIX in the AppDir
RO_WINEPREFIX="$APPDIR/winedata/.wine"
RW_WINEPREFIX="$progHome/.wine"
MNT_WINEPREFIX=/tmp/."${progName}".unionfs
else
progRealPath="$progHome/tsclient"
# WINE env
export WINEPREFIX=${WINEPREFIX:-"$progHome/.wine"}
fi
export WINEARCH=${WINEARCH:-"win32"}
export WINEDLLOVERRIDES=${WINEDLLOVERRIDES:-"mshtml="}
export WINEDEBUG=${WINEDEBUG:-"fixme-all"}
export WINELOADER=${WINELOADER:-"$APPDIR/opt/wine-stable/bin/wine"}

if [ ! -d "$progHome" ];then
mkdir -p "$progHome" || exit 1
fi

dkico() {
if [[ ! -f $progIcoD ]]; then

cp -r "$APPDIR"/usr/share/icons "$HOME"/.local/share
mkdir -p "$HOME/.local/share/applications"
DesktopFilePath="$HOME/.local/share/applications/$progName.desktop"

{
echo "[Desktop Entry]"
echo "Type=Application"
echo "Encoding=UTF-8"
echo "Name=$progName"
echo "Comment="
echo "Icon=$progName"
echo "TryExec=${OWD}/${progName}_${progArch}.AppImage"
echo "Exec=${OWD}/${progName}_${progArch}.AppImage %F"
echo "Categories=Game;"
echo "Terminal=false"
echo "StartupWMClass=Game.exe,TiberianSun.exe,clientxna.exe"
echo "Keywords=game"
} >> "$DesktopFilePath"
fi
}


if [ -d "$APPDIR/winedata/.wine" ]; then
  if [[ ! -f $progHome/TiberianSun.exe ]]; then

    cp -Rvp "$progRealPath/"* "$progHome"/ &>/dev/null
    cp "$APPDIR/winedata/.wine/drive_c/windows/system32/mscoree.dll" "$progHome/Resources"

  fi

  # Load bundled WINEPREFIX if existing and if $WINEPREFIX is not set
  if [ -d "$APPDIR/winedata/.wine" ] && [ -z "$WINEPREFIX" ] ; then
    mkdir -p "$MNT_WINEPREFIX" "$RW_WINEPREFIX"
    if [ ! -e "$MNT_WINEPREFIX/drive_c" ] ; then
      unionfs-fuse -o use_ino,uid=$UID -ocow "$RW_WINEPREFIX"=RW:"$RO_WINEPREFIX"=RO "$MNT_WINEPREFIX" || exit 1
      trap atexit EXIT
    fi
    export WINEPREFIX="$MNT_WINEPREFIX"
  elif [[ ! -d "$APPDIR/winedata/.wine" ]]; then

    mkdir -p "$HOME"/.cache/{wine,winetricks}
    mkdir -p "$HOME"/.cache/winetricks/{dotnet40,xna40}

    find "$HOME/.cache/wine/" "$HOME/.cache/winetricks/" -type l -delete &>/dev/null

    ln -s "$HERE"/winedata/wine-mono-*-x86.msi "$HOME"/.cache/wine/
    ln -s "$HERE"/winedata/dotNetFx40_Full_x86_x64.exe "$HOME"/.cache/winetricks/dotnet40/
    ln -s "$HERE"/winedata/xnafx40_redist.msi "$HOME"/.cache/winetricks/xna40/

    winetricks -q xna40 vcrun2010

    # Add dlloverrides for Game.exe TiberianSun.exe
    "$WINELOADER" REG ADD HKCU\\Software\\Wine\\AppDefaults\\Game.exe\\DllOverrides /v *ddraw /t REG_SZ /d native,builtin
    "$WINELOADER" REG ADD HKCU\\Software\\Wine\\AppDefaults\\TiberianSun.exe\\DllOverrides /v *ddraw /t REG_SZ /d native,builtin

    cp -Rvp "$progRealPath/"* "$progHome"/ &>/dev/null

  fi
  
  # crazy workaround for framework dll error
  rmdir "$progHome/.wine/drive_c/windows/Microsoft.NET/assembly/GAC_32" 2&>/dev/null
  mkdir -p "$progHome/.wine/drive_c/windows/Microsoft.NET/assembly/GAC_32" 2&>/dev/null
  
fi

atexit ()
{
  while pgrep -f "clientxna" ; do sleep 1 ; done
  pkill -f "unionfs-fuse"
  sleep 1
  rm -r "$MNT_WINEPREFIX" # "$RW_WINEPREFIX_OVERLAY"
}

# Passing args to wine apps
for i; do # for i = for i in "$@"
    # Add path in Wine form (e.g. "z:/home/user/Desktop/lol.xyz")
    if [[ -f /${i#?:} ]]; then 
        args+=("z:${i#?:}")   # When opened through .desktop or Wine path (e.g. z:/*)
    elif [[ "${i:0:1}" = "-" ]]; then
        args+=("${i/#-//}")
    fi
done

# Launch wineboot/winecfg/winetricks if requested.
# If the executable exists then launch it.
case "$1" in
  "install")
    dkico
    ;;
  "winetricks")
    winetricks "$2" "$3"
    ;;
  "msiexec"|"notepad"|"regedit"|"regsvr32"|"wineboot"|"winecfg"|"wineconsole"|"winedbg"|"winefile"|"winemine"|"winepath")
    "$WINELOADER" "$1"
    ;;
  "eglinfo"|"es2_info"|"es2gears_wayland"|"es2gears_x11"|"es2tri"|"glxinfo"|"glxheads"|"glxgears"|"glxdemo"|"vulkaninfo")
    "$@"
    ;;
   "vkcube"|"vkcubepp"|"vkcube-wayland")
    export VK_INSTANCE_LAYERS="VK_LAYER_MESA_overlay"
    "$@"
    ;;
  *)
     "$WINELOADER" "$progHome/Resources/$progBin" "${args[@]}"
    ;;
esac
